import React, { useState } from "react";
import type { NextPage, InferGetServerSidePropsType } from "next";
import { GetServerSidePropsContext } from "next";
import Head from "next/head";
import { useSession, signIn, signOut } from "next-auth/react";
import Router from "next/router";

import Card from "components/card";
import Form from "components/filter-form";

import styles from "../styles/Home.module.css";

import { prisma } from "./api/auth/[...nextauth]";

export type Item = {
    code_iso: string;
    countryOrigin: string;
    createdAt: string; //date
    id: number; // ?? string ?
    image: string;
    name: string;
    notes: null | string;
    strength: number | string;
    type: string; // перевести в типы whiskey rome  итд
    updatedAt: string; //date
    user: string;
};

//@ts-ignore
const Home: NextPage<{ bottles: Item[] }> = ({
    bottles = [],
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
    const { data: session } = useSession();
    const [data, setData] = useState(bottles);

    const [isFilterOpen, setFilterOpen] = useState(false);

    //@ts-ignore
    if (!session) {
        Router.push("/login");
        return;
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>Welcome to GHT-BAR</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div
                className="h-6 justify-center hidden md:flex font-bold"
                onClick={() => setFilterOpen((prev) => !prev)}
            >
                {isFilterOpen ? "Hide filter" : "Show filter"}
            </div>
            <div className="p-2">
                <div
                    className={`truncate ${
                        isFilterOpen ? "md:h-400" : "md:h-0"
                    }`}
                >
                    <Form setData={setData} />
                </div>
                <div className="p-8">
                    <div className="flex  flex-wrap  gap-8 justify-center">
                        {data?.map((bottle: Item) => {
                            return (
                                <Card key={bottle.id.toString()} {...bottle} />
                            );
                        })}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Home;

export async function getServerSideProps(context: GetServerSidePropsContext) {
    let bottles = [];

    let o = Object.fromEntries(
        Object.entries(context.query).filter(([_, v]) => v)
    );

    if (o.strength) {
        //@ts-ignore
        o.strength = Number(o.strength);
    }

    try {
        const result = await prisma.items.findMany({
            where: {
                ...o,
                name: {
                    //@ts-ignore
                    contains: o?.name ?? "",
                },
            },
        });

        bottles = JSON.parse(JSON.stringify(result));
    } catch (error) {
        console.log("sql connection error", error);
    }

    return {
        props: { bottles }, // will be passed to the page component as props
    };
}
