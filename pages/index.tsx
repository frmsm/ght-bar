import type { NextPage, InferGetServerSidePropsType } from "next";
import React, { useContext, useState } from "react";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import Card from "components/card";
import { AuthContext } from "components/context/auth";
import { GetServerSidePropsContext } from "next";
// import { PrismaClient } from "@prisma/client";
// const prisma = new PrismaClient();

import { prisma } from "./api/auth/[...nextauth]";
import Input from "components/input";
import executeQuery from "lib/db";
import Router from "next/router";
import { useSession, signIn, signOut } from "next-auth/react";
import Form from "components/filter-form";

export type Item = {
    code_iso: string;
    countryOrigin: string;
    createdAt: string; //date
    id: number; // ?? string ?
    image: string;
    name: string;
    notes: null | string;
    strength: number | string;
    type: string; // перевести в типы whiskey rome  итд
    updatedAt: string; //date
    user: string;
};

const Home: NextPage<{ bottles: Item[] }> = ({
        bottles = [],
    }: InferGetServerSidePropsType<typeof getServerSideProps>) => {
    const [data, setData] = useState(bottles);

    return (
        <div className={styles.container}>
            <Head>
                <title>Welcome to GHT-BAR</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Form setData={setData} />
            <div className="p-8">
                <div className="flex flex-wrap gap-8 justify-center">
                    {data?.map((bottle: Item) => {
                        return <Card key={bottle.id.toString()} {...bottle} />;
                    })}
                </div>
            </div>
        </div>
    );
};

export default Home;

export async function getServerSideProps(context: GetServerSidePropsContext) {
    // const allUsers = await prisma.users.findMany();
    // console.log(allUsers);

    let bottles = {};

    let o = Object.fromEntries(
        Object.entries(context.query).filter(([_, v]) => v)
    );

    if (o.strength) {
        //@ts-ignore
        o.strength = Number(o.strength);
    }

    try {
        // const result = await executeQuery(getQuery(query));

        // bottles = JSON.parse(JSON.stringify(result));
        const result = await prisma.items.findMany({
            where: {
                ...o,
                name: {
                    //@ts-ignore
                    contains: o?.name ?? "",
                },
            },
        });

        bottles = JSON.parse(JSON.stringify(result));
    } catch (error) {
        console.log("sql connection error", error);
    }

    return {
        props: { bottles }, // will be passed to the page component as props
    };
}

const getQuery = (query: GetServerSidePropsContext["query"]) => {
    if (query.country) {
        return queryGetByCountry(query.country);
    }

    if (query.user) {
        return queryGetByUsername(query.user);
    }

    if (query.strength) {
        return queryGetByStrength(query.strength);
    }

    return queryGetAll();
};

const itemsSelect = "SELECT * FROM ght_bar.items";

const queryGetAll = () => ({
    query: itemsSelect,
    values: [],
});

const queryGetByCountry = (value: string | any) => ({
    query: `${itemsSelect} where countryOrigin = '${value}';`,
    values: [],
});

const queryGetByUsername = (value: string | any) => ({
    query: `${itemsSelect} where user = '${value}';`,
    values: [],
});

const queryGetByStrength = (value: string | any) => ({
    query: `${itemsSelect} where strength = '${value}';`,
    values: [],
});
